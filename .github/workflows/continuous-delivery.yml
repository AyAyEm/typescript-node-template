# Copyright © 2020 The Sapphire Community and its contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

name: Continous Delivery
on:
  push:
    branches:
      - main
      - master
jobs:
  Docgen:
    name: Docgen
    runs-on: ubuntu-latest
    if: "github.event_name == 'push'"
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v14
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Restore CI Cache
        uses: actions/cache@v2.1.6
        id: cache-restore
        with:
          path: node_modules
          key: ${{ runner.os }}-14-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies if Cache Miss
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: yarn --frozen-lockfile
      - name: Build documentation
        run: yarn typedoc
      - name: Publish Docs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          REPO="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          echo -e "\n# Checkout the repo in the target branch"
          TARGET_BRANCH="gh-pages"
          git clone $REPO out -b $TARGET_BRANCH
          echo -e "\n# Remove any old files in the out folder"
          rm -rfv out/assets/*
          rm -rfv out/interfaces/*
          rm -rfv out/*.html
          echo -e "\n# Move the generated docs to the newly-checked-out repo, to be committed and pushed"
          rsync -vaI LICENSE.md out/
          rsync -vaI README.md out/
          rsync -vaI docs/ out/
          echo -e "\n# Commit and push"
          cd out
          git add --all .
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_EMAIL}"
          git commit -m "docs: api docs build for ${GITHUB_SHA}" || true
          git push origin $TARGET_BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
          GITHUB_ACTOR: ${{ secrets.ACTOR }}
          GITHUB_EMAIL: ${{ secrets.EMAIL }}
  Build:
    name: Publish Build
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: Restore CI Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-14-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn --ignore-scripts --frozen-lockfile
      - name: Build Code
        run: yarn build
      - name: Push new code
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo -e "\n# Initialize some useful variables"
          REPO="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          BRANCH_OR_TAG=`awk -F/ '{print $2}' <<< $GITHUB_REF`
          CURRENT_BRANCH=`awk -F/ '{print $NF}' <<< $GITHUB_REF`
          if [ "$BRANCH_OR_TAG" == "heads" ]; then
            SOURCE_TYPE="branch"
          else
            SOURCE_TYPE="tag"
          fi
          echo -e "\n# Checkout the repo in the target branch"
          TARGET_BRANCH="build"
          git clone $REPO out -b $TARGET_BRANCH
          echo -e "\n# Remove any old files in the dist folder"
          rm -rfv out/dist/*
          rsync -vaI package.json out/
          rsync -vaI README.md out/
          rsync -vaI LICENSE.md out/
          rsync -vaI dist/ out/dist
          echo -e "\n# Removing TSC incremental file"
          rm -rfv out/dist/**/*.tsbuildinfo
          echo -e "\n# Commit and push"
          cd out
          git add --all .
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_EMAIL}"
          git commit -m "build: tsc build for ${GITHUB_SHA}" || true
          git push origin $TARGET_BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
          GITHUB_ACTOR: ${{ secrets.ACTOR }}
          GITHUB_EMAIL: ${{ secrets.EMAIL }}
